/*
Code Analysis

Main functionalities:
The Cart class provides functionality for managing a shopping cart. It allows for adding, removing, and updating the quantity of items in the cart, as well as calculating the total amount of the cart. It also provides a method for checking out, which returns a default empty cart.

Methods:
- getDefaultCart(): returns a default empty cart object
- getTotalCartAmount(currentCart): calculates and returns the total amount of the cart based on the current items and their quantities
- addToCart(itemId, currentCart): adds one item with the specified ID to the cart and returns the updated cart object
- removeFromCart(itemId, currentCart): removes one item with the specified ID from the cart and returns the updated cart object
- updateCartItemCount(newAmount, itemId, currentCart): updates the quantity of the item with the specified ID in the cart to the new amount and returns the updated cart object
- checkout(): returns a default empty cart object

Fields:
- None. The class does not have any fields.
*/

import Cart from "./cart";
import { getProducts } from "../products";

describe('Cart_class', () => {

    // Tests that getDefaultCart returns an object with all items initialized to 0
    it("test_get_default_cart", () => {
        const expectedCart = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0
        };
        expect(Cart.getDefaultCart()).toEqual(expectedCart);
    });

    // Tests that addToCart adds one item to the cart
    it("test_add_to_cart", () => {
        const currentCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 0,
            6: 1
        };
        const expectedCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 1,
            6: 1
        };
        expect(Cart.addToCart(5, currentCart)).toEqual(expectedCart);
    });

    // Tests that addToCart adds one item to the cart
    it("test_add_to_cart_when_there_are_more_than_0", () => {
        const currentCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 0,
            6: 1
        };
        const expectedCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 4,
            5: 0,
            6: 1
        };
        expect(Cart.addToCart(4, currentCart)).toEqual(expectedCart);
    });

    // Tests that removeFromCart removes one item from the cart
    it("test_remove_from_cart", () => {
        const currentCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 1,
            6: 1
        };
        const expectedCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 0,
            6: 1
        };
        expect(Cart.removeFromCart(5, currentCart)).toEqual(expectedCart);
    });

    // Tests that updateCartItemCount updates the item count in the cart
    it("test_update_cart_item_count", () => {
        const currentCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 1,
            6: 1
        };
        const expectedCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 2,
            6: 1
        };
        expect(Cart.updateCartItemCount(2, 5, currentCart)).toEqual(expectedCart);
    });

    // Tests that getTotalCartAmount returns the correct total amount for a given cart
    it("test_get_total_cart_amount", () => {
        const currentCart = {
            1: 2,
            2: 1,
            3: 0,
            4: 3,
            5: 0,
            6: 1
        };
        const expectedTotalAmount = (2 * getProducts()[0].price) + (1 * getProducts()[1].price) + (3 * getProducts()[3].price) + (1 * getProducts()[5].price);
        expect(Cart.getTotalCartAmount(currentCart)).toEqual(expectedTotalAmount);
    });

    it("test_get_total_cart_amount_empty_cart", () => {
        const emptyCart = Cart.getDefaultCart();
        const totalAmount = Cart.getTotalCartAmount(emptyCart);
        expect(totalAmount).toBe(0);
    });


});
